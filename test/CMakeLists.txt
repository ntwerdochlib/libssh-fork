cmake_minimum_required(VERSION 3.7)
project(ssh_test)

#set(OPENSSL_ROOT_DIR "e:/source/bomgar/trymax.git/networkstreaming/3rdparty/openssl/x64" CACHE STRING "" FORCE)
set(OPENSSL_ROOT_DIR "e:/source/3rdparty/openssl-1.0.2h/x64d" CACHE STRING "" FORCE)
set(OPENSSL_USE_STATIC_LIBS TRUE)
set(OPENSSL_MSVC_STATIC_RT TRUE)
find_package(OpenSSL REQUIRED)
if (!OpenSSL_FOUND)
	message(FATAL "OpenSLL is required")
endif()

option(WITH_GSSAPI "Build with GSSAPI support" OFF)
option(WITH_ZLIB "Build with ZLIB support" OFF)
option(WITH_SSH1 "Build with SSH1 support" OFF)
option(WITH_SFTP "Build with SFTP support" ON)
option(WITH_SERVER "Build with SSH server support" ON)
option(WITH_STATIC_LIB "Build with a static library" OFF)
option(WITH_DEBUG_CRYPTO "Build with cryto debug output" ON)
option(WITH_DEBUG_CALLTRACE "Build with calltrace debug output" ON)
option(WITH_GCRYPT "Compile against libgcrypt" OFF)
option(WITH_MBEDTLS "Compile against libmbedtls" OFF)
option(WITH_PCAP "Compile with Pcap generation support" OFF)
option(WITH_INTERNAL_DOC "Compile doxygen internal documentation" OFF)
option(WITH_TESTING "Build with unit tests" OFF)
option(WITH_CLIENT_TESTING "Build with client tests; requires a running sshd" OFF)
option(WITH_BENCHMARKS "Build benchmarks tools" OFF)
option(WITH_EXAMPLES "Build examples" OFF)
option(WITH_NACL "Build with libnacl (curve25519)" OFF)
option(FUZZ_TESTING "Build with fuzzer for the server" OFF)
#set(WITH_PCAP OFF CACHE BOOL "" FORCE)
#set(WITH_SERVER ON CACHE BOOL "" FORCE)
#set(WITH_EXAMPLES OFF CACHE BOOL "" FORCE)
#set(WITH_GSSAPI OFF CACHE BOOL "" FORCE)
#set(WITH_ZLIB OFF CACHE BOOL "" FORCE)
#set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
#set(WITH_STATIC_LIB ON CACHE BOOL "" FORCE)
#set(WITH_INTERNAL_DOC OFF CACHE BOOL "" FORCE)
add_subdirectory(".." ssh)
#set_property(TARGET ssh_static ssh_shared DIRECTORY .. APPEND PROPERTY INCLUDE_DIRECTORIES "${CMAKE_CURRENT_BINARY_DIR}/libssh")
set_property(DIRECTORY .. APPEND PROPERTY INCLUDE_DIRECTORIES "${CMAKE_CURRENT_BINARY_DIR}/libssh")

get_filename_component(OPENSSL_LIB_DIR ${OPENSSL_CRYPTO_LIBRARY} DIRECTORY)
message(STATUS "CMAKE_CURRENT_LIST_DIR: ${CMAKE_CURRENT_LIST_DIR}")
message(STATUS "CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")
message(STATUS "OPENSSL_CRYPTO_LIBRARY: ${OPENSSL_CRYPTO_LIBRARY}")
message(STATUS "OPENSSL_LIB_DIR: ${OPENSSL_LIB_DIR}")

add_executable(ssh_test test.cpp)
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ssh_test)
set_property(TARGET ssh_test APPEND_STRING PROPERTY LINK_FLAGS " /LIBPATH:${OPENSSL_LIB_DIR}")
target_include_directories(ssh_test PUBLIC "${OPENSSL_INCLUDE_DIR}")
target_include_directories(ssh_test PUBLIC "${CMAKE_CURRENT_BINARY_DIR}/libssh")
target_include_directories(ssh_test PUBLIC "../include")
#target_include_directories(ssh_test PUBLIC ssh_static)
#target_link_libraries(ssh_test PUBLIC "${CMAKE_CURRENT_BINARY_DIR}/ssh/src/static/Debug/ssh.lib")
target_link_libraries(ssh_test PUBLIC ssh_static)
target_link_libraries(ssh_test PUBLIC "${OPENSSL_CRYPTO_LIBRARY}" "ws2_32.lib")
